apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

static def getGitBranch() {
    return 'git symbolic-ref --short -q HEAD'.execute().text.trim()
}

static def getGitRevision(){
    return "git rev-parse --short HEAD".execute().text.trim()
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        multiDexEnabled true
        applicationId "com.example.android_kt_wandroid"
        compileSdkVersion rootProject.ext.android.compileSdkVersion
        buildToolsVersion rootProject.ext.android.buildToolsVersion
        defaultConfig {
            minSdkVersion rootProject.ext.android.minSdkVersion
            targetSdkVersion rootProject.ext.android.targetSdkVersion
            versionCode rootProject.ext.android.versionCode
            versionName rootProject.ext.android.versionName

            renderscriptTargetApi 19
            renderscriptSupportModeEnabled true

            kapt {
                arguments {
                    arg("AROUTER_MODULE_NAME", project.getName())
                }
            }
        }
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "android_${getGitBranch()}_${getGitRevision()}.apk"
        }
    }
}

dependencies {
    implementation project(':lib_common')
    if (!isRunAlone.toBoolean()) {
        implementation project(':module_mine')
        implementation project(':module_main')
        implementation project(':module_video')
        implementation project(':module_article')
    }
    kapt rootProject.ext.compiler['arouter-compiler']
}

task hotfix {
    doLast {
        exec {
            commandLine 'rm', '-r', './build/patch'
        }
        exec {
            commandLine 'mkdir', './build/patch'
        }
        exec {
            commandLine 'javac', "./src/main/java/${patchPath}.java", '-d', './build/patch'
        }
        exec {
            commandLine '/Sdk_new/Sdk_1.0/Sdk/build-tools/30.0.2/d8', "./build/patch/${patchPath}.class", '--output', './build/patch'
        }
        exec {
            commandLine 'mv', "./build/patch/classes.dex", './build/patch/hotfix.dex'
        }
    }
}
